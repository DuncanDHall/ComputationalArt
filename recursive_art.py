""" This script saves things to your computer! it will generate a folder in
    it's current directory with a time stamp, and generate some artwork in
    it, as well as give you some deets about the back end of the generation
    (in the form of .txt files. You can specify your own rgb color values as
    well. The color palet I have at the bottom of the file right now is
    generated by color.adobe.com's triad color rule, which I have darkened.
"""

import random
import time
import os.path
from math import sin, cos, pi, sqrt
from PIL import Image


def color_map(val):
    """ Maps input value between -1 and 1 to an integer 0-255, suitable for
        use as an RGB color code.

        val: value to remap, must be a float in the interval [-1, 1]
        returns: integer in the interval [0,255]

        >>> color_map(-1.0)
        0
        >>> color_map(1.0)
        255
        >>> color_map(0.0)
        127
        >>> color_map(0.5)
        191
    """
    # NOTE: This relies on remap_interval, which you must provide
    color_code = remap_interval(val, -1, 1, 0, 255)
    return int(color_code)


def test_image(filename, x_size=350, y_size=350):
    """ Generate test image with random pixels and save as an image file.

        filename: string filename for image (should be .png)
        x_size, y_size: optional args to set image dimensions (default: 350)
    """
    # Create image and loop over all pixels
    im = Image.new("RGB", (x_size, y_size))
    pixels = im.load()
    for i in range(x_size):
        for j in range(y_size):
            # x = remap_interval(i, 0, x_size, -1, 1)
            # y = remap_interval(j, 0, y_size, -1, 1)
            pixels[i, j] = (random.randint(0, 255),  # Red channel
                            random.randint(0, 255),  # Green channel
                            random.randint(0, 255))  # Blue channel

    im.save(filename)


def generate_art(
        min_depth, max_depth, min_varience=-1, max_varience=-1,
        color1=[1.0, 0.0, 0.0], color2=[0.0, 1.0, 0.0], color3=[0.0, 0.0, 1.0],
        x_size=350, y_size=350,
        ):
    """ Generate computational art and save as an image file.

        filename: string filename for image (should be .png)
        x_size, y_size: optional args to set image dimensions (default: 350)
    """
    if min_varience == -1:
        min_varience = min_depth
    if max_varience == -1:
        max_varience = max_depth

    # Functions for red, green, and blue channels - where the magic happens!
    seed_function = build_random_function(min_depth, max_depth)

    # red_function = build_random_function(
    #     min_varience, max_varience, seed_function)
    # green_function = build_random_function(
    #     min_varience, max_varience, seed_function)
    # blue_function = build_random_function(
    #     min_varience, max_varience, seed_function)

    color1_function = build_random_function(
        min_varience, max_varience, seed_function)
    color2_function = build_random_function(
        min_varience, max_varience, seed_function)
    color3_function = build_random_function(
        min_varience, max_varience, seed_function)

    # Create image and loop over all pixels
    im = Image.new("RGB", (x_size, y_size))
    pixels = im.load()
    for i in range(x_size):
        for j in range(y_size):
            x = remap_interval(i, 0, x_size, -1, 1)
            y = remap_interval(j, 0, y_size, -1, 1)

            color1_value = evaluate_random_function(color1_function, x, y)
            color2_value = evaluate_random_function(color2_function, x, y)
            color3_value = evaluate_random_function(color3_function, x, y)

            red_value = min(color1_value*color1[0] +
                            color2_value*color2[0] +
                            color3_value*color3[0],
                            1.0)
            green_value = min(color1_value*color1[1] +
                              color2_value*color2[1] +
                              color3_value*color3[1],
                              1.0)
            blue_value = min(color1_value*color1[2] +
                             color2_value*color2[2] +
                             color3_value*color3[2],
                             1.0)

            pixels[i, j] = (
                    color_map(red_value),
                    color_map(green_value),
                    color_map(blue_value)
                    )

    return {
        'image': im,
        'functions': [
            seed_function, color1_function, color2_function, color3_function
            ]
        }


def generate_and_save_art(
        batch_size, depth, varience=-1,
        color1=[1.0, 0.0, 0.0], color2=[0.0, 1.0, 0.0], color3=[0.0, 0.0, 1.0],
        x_size=350, y_size=350,
        optional_tag='', name_stem='art',):
    """ Created to handle unique saving of images. Creates and saves a number of
        images from generate_art() in a folder with the current date. Also logs
        functions for each color channel in functions.txt
    """

    batch_folder_name = time.strftime('%I.%M.%S_%d.%m.%Y')
    os.mkdir(batch_folder_name)

    current_dir_stem = os.getcwd() + '/' + batch_folder_name + '/'

    for i in range(batch_size):
        file_name = name_stem + str(i+1) + '.png'
        instance = generate_art(
            depth, depth, varience, varience,
            color1, color2, color3,
            x_size, y_size)
        # save image
        image = instance['image']
        image.save(current_dir_stem + file_name)

        # log info
        functions = instance['functions']
        log = (
            file_name + '\n'
            '\t seed function: ' + str(functions[0]) + '\n' +
            '\t color 1 function: ' + str(functions[1]) + '\n' +
            '\t color 2 function: ' + str(functions[2]) + '\n' +
            '\t color 3 function: ' + str(functions[3]) + '\n' +
            '\n\n'
        )
        with open(current_dir_stem + name_stem + str(i+1) + '.txt', 'a') as f:
            f.write(log)

if __name__ == '__main__':


    test_image("noise.png")
